class PictureDecorator < ApplicationDecorator
  decorates :picture

  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #
  #   Or, optionally enable "lazy helpers" by including this module:
  #     include Draper::LazyHelpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #
  #   def created_at
  #     h.content_tag :span, time.strftime("%a %m/%d/%y"),
  #                   :class => 'timestamp'
  #   end

  def name_and_year
    h.content_tag(:div, [self.name.blank? ? "Sans titre" : "#{self.name}", self.year ? I18n.l(self.year, :format => :year) : nil].reject{|a| a.blank?}.join(', '))
  end

  def materials_technic_dimensions
    if not self.materials.blank? or not self.dimensions.blank? or not self.technic.blank?
      h.content_tag(:div, [self.materials, self.technic, self.dimensions].reject{|a| a.blank?}.join(', '))
    end
  end

end
